// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Sample {
  id         Int      @id @default(autoincrement())
  name       String
  code       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id            Int     @id @default(autoincrement())
  user_name     String?
  user_email    String  @unique
  user_photo    String?
  user_password String? @db.VarChar(255)
  is_verified   Boolean @default(false)
  role          String

  Address   Address[]
  Cart      Cart[]
  Warehouse Warehouse?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Address {
  id          Int    @id @default(autoincrement())
  street      String
  postal_code Int
  city        String
  country     String

  lat  String
  long String

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  user_id     Int
  user        User         @relation(fields: [user_id], references: [id])
  Transaction Transaction?

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  CartItem   CartItem[]
}

model Transaction {
  id                Int       @id @default(autoincrement())
  status            String
  payment_method    String
  payment_proof     String
  confirmation_date DateTime?
  final_price       Float
  destination_id    Int

  warehouse_id Int
  warehouse    Warehouse @relation(fields: [warehouse_id], references: [id])

  cart_id Int  @unique
  cart    Cart @relation(fields: [cart_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Warehouse {
  id                   Int    @id @default(autoincrement())
  warehouse_name       String
  warehouse_detail_loc String
  warehouse_city       String
  warehouse_province   String
  lat                  String
  long                 String

  warehouse_admin_id Int?             @unique
  user               User?            @relation(fields: [warehouse_admin_id], references: [id])
  Transaction        Transaction[]
  WarehouseStock     WarehouseStock[]

  senderMutation   Mutation[] @relation("sender")
  receiverMutation Mutation[] @relation("receiver")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Mutation {
  id                Int     @id @default(autoincrement())
  from_warehouse_id Int
  to_warehouse_id   Int
  sender_name       String
  receiver_name     String?
  book_id           Int
  quantity          Int
  status            STATUS
  sender_notes      String?
  receiver_notes    String?

  from_warehouse Warehouse @relation("sender", fields: [from_warehouse_id], references: [id])
  to_warehouse   Warehouse @relation("receiver", fields: [to_warehouse_id], references: [id])
  book           Book      @relation(fields: [book_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum STATUS {
  PROCESSED
  COMPLETED
  REJECTED
  CANCELED
}

model Book {
  id                  Int    @id @default(autoincrement())
  book_name           String @unique
  book_description    String @db.LongText
  book_author         String
  book_publisher      String
  book_published_year Int
  book_category_id    Int
  book_ISBN           String
  book_price          Float
  book_weight         Float
  primary_image       String

  BookImage      BookImage[]
  bookCategory   BookCategory     @relation(references: [id], fields: [book_category_id])
  WarehouseStock WarehouseStock[]

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  CartItem   CartItem[]
  Mutation   Mutation[]
}

model BookImage {
  id         Int    @id @default(autoincrement())
  book_image String

  book_id Int
  book    Book @relation(fields: [book_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model BookCategory {
  id                 Int    @id @default(autoincrement())
  book_category_name String @unique

  Book Book[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model WarehouseStock {
  id Int @id @default(autoincrement())

  book_id      Int
  warehouse_id Int
  stockQty     Int

  JurnalStock JurnalStock[]
  book        Book          @relation(fields: [book_id], references: [id])
  warehouse   Warehouse     @relation(fields: [warehouse_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model JurnalStock {
  id          Int     @id @default(autoincrement())
  message     String?
  oldStock    Int
  newStock    Int
  stockChange Int

  type TYPE

  warehouseStockId Int
  warehouseStock   WarehouseStock @relation(fields: [warehouseStockId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum TYPE {
  PLUS
  MINUS
}

model CartItem {
  id           Int   @id @default(autoincrement())
  cart_id      Int
  book_id      Int
  quantity     Int
  total_price  Float
  total_weight Float

  cart Cart @relation(fields: [cart_id], references: [id])
  book Book @relation(fields: [book_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model RajaOngkir {
  city_id     Int    @id
  province_id Int
  city_name   String
  postal_code Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
